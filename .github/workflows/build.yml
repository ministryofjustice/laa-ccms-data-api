# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: read
  packages: write

jobs:
    build-test-publish:

      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
        - name: Build with Gradle
          uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
          with:
            arguments: build

        - name: upload jarfile
          uses: actions/upload-artifact@v3
          with:
            name: data-api-jar
            path: data-service/build/libs/data-service-0.0.1-SNAPSHOT.jar

        - name: Test
          uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
          with:
            arguments: jacocoTestCoverageVerification

        - name: Integration Test
          uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
          with:
            arguments: integrationTest

        - name: Update snapshot version
          uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
          with:
            arguments: updateSnapshotVersion

        - name: Publish package
          uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
          with:
            arguments: publish
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    ecr:
      needs: build-test-publish
      runs-on: ubuntu-latest
      permissions:
        id-token: write # for requesting jwt
        contents: read  # for actions/checkout
      steps:
        # Checkout github repo
        - uses: actions/checkout@v3
        # Assume role in cloud platform
        - name: download jar
          uses: actions/download-artifact@v3
          with:
            name: data-api-jar
        - uses: aws-actions/configure-aws-credentials@v2
          with:
            role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
            aws-region: ${{ vars.ECR_REGION }}
        # Login to container repo
        - uses: aws-actions/amazon-ecr-login@v1
          id: login-ecr
        # Build and push docker image to container repo
        - run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: ${{ vars.ECR_REPOSITORY }}
            IMAGE_TAG: ${{ github.sha }}
        - name: delete artifact
          uses: geekyeggo/delete-artifact@v2
          with:
            name: data-api-jar


    deploy-dev:
      runs-on: ubuntu-latest
      needs: ecr
      env:
        KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Update image tag
          env:
            ECR_URL: ${{ secrets.ECR_URL_DEV }}
          run: export IMAGE_TAG=${{ github.sha }} && cat kubectl_deploy/deploy.tpl | envsubst > kubectl_deploy/deployment.yaml
        - name: Authenticate to the cluster
          env:
            KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_DEV }}
          run: |
            echo "${{ secrets.KUBE_CERT_DEV }}" > ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_DEV }}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE_DEV}}
            kubectl config use-context ${KUBE_CLUSTER}
        - name: Apply the updated manifest
          run: kubectl -n ${KUBE_NAMESPACE} apply -f kubectl_deploy --namespace=laa-ccms-civil

